use libc::types::os::common::bsd44::*;

/* automatically generated by rust-bindgen */

pub type utp_crust_socket = *mut ::libc::c_void;
pub type Enum_event_code_t = ::libc::c_uint;
pub const UTP_CRUST_BEGIN: ::libc::c_uint = 0;
pub const UTP_CRUST_END: ::libc::c_uint = 1;
pub const UTP_CRUST_NEW_CONNECTION: ::libc::c_uint = 2;
pub const UTP_CRUST_LOST_CONNECTION: ::libc::c_uint = 3;
pub const UTP_CRUST_NEW_MESSAGE: ::libc::c_uint = 4;
pub type event_code = Enum_event_code_t;
pub type utp_crust_event_callback =
    ::std::option::Option<extern "C" fn(socket: utp_crust_socket,
                                        ev: event_code,
                                        data: *const ::libc::c_void,
                                        bytes: size_t) -> ()>;
#[link(name = "utp_crust")]
extern "C" {
    pub fn utp_crust_create_socket(socket: *mut utp_crust_socket,
                                   port: *mut ::libc::c_ushort,
                                   callback: utp_crust_event_callback)
     -> ::libc::c_int;
    pub fn utp_crust_connect(socket: utp_crust_socket,
                             addr: *const sockaddr, len: socklen_t)
     -> ::libc::c_int;
    pub fn utp_crust_send(socket: utp_crust_socket,
                          buf: *const ::libc::c_void, bytes: size_t)
     -> ::libc::c_int;
    pub fn utp_crust_destroy_socket(socket: utp_crust_socket)
     -> ::libc::c_int;
}
